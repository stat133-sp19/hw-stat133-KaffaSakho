
library("testthat")
source("R/workout03.R")
devtools::use_testthat()


test_that("check_prob handles a number between 0 and 1 included",{
  prob1 <- 0.7
  prob2 <- 2 
  
  expect_true(check_prob(prob1))
  expect_length(prob1,1)
  expect_error(check_prob(prob2))
})

test_that("check_trials handles non-negative integers", {
  trials1 <- -0.5
  trials2 <- 4
  
  expect_true(check_trials(trials2))
  expect_length(trials2, 1)
  expect_error(trials1)
})

test_that("check_success handles vector of non-negative integers less than trials", {
  success1 <- 2:5
  success2 <- -4
  success3 <- 9
  trials <- 6
  
  expect_true(check_success(success1,trials))
  expect_length(check_success(success1,trials), 1)
  expect_error(check_success(success2,trials))
  expect_error(check_success(success3,trials))
  
})

test_that("aux_mean works with normal input", {
  trials1 <- 10
  prob <- 0.3 
  mean <- trials1 * prob
  
  expect_equal(aux_mean(trials1,prob), mean)
  
})

test_that("aux_variance works with normal input", {
  trials1 <- 10
  prob <- 0.3 
  var <- trials*prob*(1-prob)
  
  expect_equal(aux_variance(trials1,prob), var)
})

test_that("aux_mode works with normal input", {
  trials1 <- 10
  prob <- 0.3 
  mod <- floor((trials*prob) + prob)
  
  expect_equal(aux_mode(trials1,prob), mod)
})

test_that("aux_skewness works with normal input", {
  trials1 <- 10
  prob <- 0.3 
  skew <- (1-2*prob)/sqrt(trials*prob*(1-prob))
  
  expect_equal(aux_skewness(trials1,prob), skew)
})

test_that("aux_kurtosis works with normal input", {
  trials1 <- 10
  prob <- 0.3 
  kurt <- (1-6*prob*(1-prob))/(trials*prob*(1-prob))
  
  expect_equal(aux_kurtosis(trials1,prob), kurt)
})

test_that("bin_choose handles correct input and works with normal input", {
  
})